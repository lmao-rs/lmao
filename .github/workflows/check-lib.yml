# Checks performed on our common library crates.
name: Library

on:
  push:
    branches:
      - main
      - next
  pull_request:

env:
  # Use `haswell` instead of `native` due to some GitHub Actions runners not
  # supporting some `avx512` instructions.
  RUSTFLAGS: -C target-cpu=haswell -D warnings

jobs:
  # Run MSRV first to save Actions time if the code doesn't compile at all.
  MSRV:
    name: Minimum supported Rust version
    runs-on: ubuntu-latest
    env:
      minrust: 1.57

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain (${{ env.minrust }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.minrust }}
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Output processor info
        run: cat /proc/cpuinfo

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - run: cargo check --all-features --all-targets

  # Check documentation
  build-docs:
    name: Build docs
    needs: [MSRV]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Build docs
        env:
          RUSTDOCFLAGS: --cfg docsrs
        run: |
          cargo doc --no-deps --features=permission-calculator
          cargo doc -p twilight-util --no-deps --all-features

  sync-readme:
    name: Sync readme
    needs: [MSRV]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install cargo-sync-readme
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-sync-readme

      - name: Run in cache-inmemory
        run: cd cache/in-memory && cargo sync-readme --check
      - name: Run in command-parser
        run: cd command-parser && cargo sync-readme --check
      - name: Run in embed-builder
        run: cd embed-builder && cargo sync-readme --check
      - name: Run in gateway
        run: cd gateway && cargo sync-readme --check
      - name: Run in gateway-queue
        run: cd gateway-queue && cargo sync-readme --check
      - name: Run in http
        run: cd http && cargo sync-readme --check
      - name: Run in lavalink
        run: cd lavalink && cargo sync-readme --check
      - name: Run in mention
        run: cd mention && cargo sync-readme --check
      - name: Run in model
        run: cd model && cargo sync-readme --check
      - name: Run in standby
        run: cd standby && cargo sync-readme --check
      - name: Run in twilight
        run: cd twilight && cargo sync-readme --check
      - name: Run in util
        run: cd util && cargo sync-readme --check
      - name: Run in validate
        run: cd validate && cargo sync-readme --check

  # Lints
  clippy:
    name: Clippy
    needs: [MSRV]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run clippy
        run: cargo clippy --all-features --all-targets

  codespell:
    name: Spelling
    needs: [MSRV]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Run Codespell
        uses: codespell-project/actions-codespell@master

  rustfmt:
    name: Format
    needs: [MSRV]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  min-vers:
    name: Minimal crate versions
    needs: [MSRV]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-hack

      - name: Install cargo-minimal-versions
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-minimal-versions

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Check minimal versions
        run: cargo minimal-versions check

  # Tests
  test:
    name: Test
    needs: [MSRV]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests with nextest
        run: cargo nextest --config-file ${{ github.workspace }}/nextest.toml run --profile ci

  test-features:
    name: Test ${{ matrix.package }} feat. ${{ matrix.features }}
    needs: [test]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        package:
          - http
          - gateway
          - lavalink
        features:
          - native
          - rustls-native-roots
          - simd-json

        include:
          - package: http
            features: simd-json
            additional: --features rustls-native-roots
          - package: gateway
            features: rustls-native-roots
            additional: --features zlib-stock
          - package: gateway
            features: native
            additional: --features zlib-stock
          - package: gateway
            features: simd-json
            additional: --features rustls-native-roots,zlib-stock
          - package: lavalink
            additional: --features http-support

          - package: util
            features: full

        exclude:
          - package: lavalink
            features: simd-json

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Test ${{ matrix.package }} feat. ${{ matrix.features }}
        working-directory: ${{ matrix.package }}
        run: |
          cargo nextest --config-file ${{ github.workspace }}/nextest.toml run --profile ci --no-default-features --features ${{ matrix.features }} ${{ matrix.additional }}
