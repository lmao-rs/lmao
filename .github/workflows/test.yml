name: Test

on: [push, pull_request]

env:
  # Use `haswell` instead of `native` due to some GitHub
  # Actions runners not supporting some `avx512` instructions.
  RUSTFLAGS: -C target-cpu=haswell

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Run cargo test
        run: cargo test

  test-features:
    name: Test ${{ matrix.package }} feat. ${{ matrix.features }}
    needs: [test]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        package:
          - http
          - gateway
          - lavalink
        features:
          - native
          - rustls
          - simd-json

        include:
          - package: http
            features: simd-json
            additional: --features rustls
          - package: gateway
            features: rustls
            additional: --features zlib-stock
          - package: gateway
            features: native
            additional: --features zlib-stock
          - package: gateway
            features: simd-json
            additional: --features rustls,zlib-stock
          - package: lavalink
            additional: --features http-support

          - package: util
            features: full

        exclude:
          - package: lavalink
            features: simd-json

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Test ${{ matrix.package }} feat. ${{ matrix.features }}
        working-directory: ${{ matrix.package }}
        run: |
          cargo test --no-default-features --features ${{ matrix.features }} ${{ matrix.additional }}

  MSRV:
    runs-on: ubuntu-latest
    env:
      minrust: 1.53

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain (${{ env.minrust }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.minrust }}
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Output processor info
        run: cat /proc/cpuinfo

      - run: cargo check --workspace --benches --examples --tests --all-features

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    # Don't collect coverage if tests failed
    needs: test

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set excluded examples
        id: excluded-examples
        run: echo "::set-output name=out::$(grep -h '^name' examples/*/Cargo.toml | cut -d \" -f2 | xargs -I '{}' printf '--exclude {} ')"

      - name: Collect coverage
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: "--ignore-tests --workspace --all-features ${{ steps.excluded-examples.outputs.out }}"

      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v2

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: cobertura.xml

  miri:
    name: Miri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set dynamic values
        id: values
        run: |
          echo "::set-output name=miri-version::nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)"
          echo "::set-output name=excluded-examples::$(grep -h '^name' examples/*/Cargo.toml | cut -d \" -f2 | xargs -I '{}' printf '--exclude {} ')"

      - name: Install ${{ steps.values.outputs.miri-version }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.values.outputs.miri-version }}
          override: true
          components: miri, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Install xargo
        uses: actions-rs/install@v0.1
        with:
          crate: xargo
          use-tool-cache: true

      - name: Run cargo clean
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Run Miri UB check
        uses: actions-rs/cargo@v1
        with:
          command: miri
          args: test --all-features ${{ steps.values.outputs.excluded-examples }}
        env:
          MIRIFLAGS: "-Zmiri-disable-isolation"
