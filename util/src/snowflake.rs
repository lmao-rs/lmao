//! Provides the Snowflake trait for defining extractable information from a Discord Snowflake.

use twilight_model::id::{marker, Id};

/// Snowflake is a trait for defining extractable information from a Snowflake. A Snowflake is a
/// u64 generated by Discord to uniquely identify a resource.
pub trait Snowflake {
    /// Returns the u64 backing the Snowflake.
    fn id(&self) -> u64;

    /// The Unix epoch of the Snowflake in milliseconds, indicating when it was generated.
    ///
    /// Derived from bits 22..63 of the id.
    ///
    /// # Examples
    ///
    /// See when a user was created using [`chrono`](https://docs.rs/chrono):
    ///
    /// ```
    /// use chrono::{Utc, TimeZone};
    /// use twilight_util::snowflake::Snowflake;
    /// use twilight_model::id::{marker, Id};
    ///
    /// let id = Id::<marker::User>::new(105484726235607040).expect("non zero");
    ///
    /// assert_eq!(
    ///     "2015-10-19T01:58:38.546+00:00",
    ///     Utc.timestamp_millis(id.timestamp()).to_rfc3339()
    /// );
    /// ```
    ///
    /// See when a user was created using [`time`](https://docs.rs/time):
    ///
    /// ```
    /// use time::{Duration, format_description::well_known::Rfc3339, OffsetDateTime};
    /// use twilight_util::snowflake::Snowflake;
    /// use twilight_model::id::{marker, Id};
    ///
    /// # fn main() -> Result<(), Box<dyn std::error::Error>> {
    /// let id = Id::<marker::User>::new(105484726235607040).expect("non zero");
    /// // Convert milliseconds to seconds or nanoseconds.
    /// let dur = Duration::milliseconds(id.timestamp());
    ///
    /// let ts = OffsetDateTime::from_unix_timestamp(dur.whole_seconds())?;
    /// let ts_milli = OffsetDateTime::from_unix_timestamp_nanos(dur.whole_nanoseconds())?;
    ///
    /// assert_eq!("2015-10-19T01:58:38Z", ts.format(&Rfc3339)?);
    /// assert_eq!("2015-10-19T01:58:38.546Z", ts_milli.format(&Rfc3339)?);
    /// # Ok(()) }
    /// ```
    #[allow(clippy::cast_possible_wrap)]
    fn timestamp(&self) -> i64 {
        // Discord's custom epoch, the unix time in milliseconds for the first second of 2015.
        const DISCORD_EPOCH: u64 = 1_420_070_400_000;

        ((self.id() >> 22) + DISCORD_EPOCH) as i64
    }

    /// The id of the internal worker that generated the Snowflake.
    ///
    /// Derived from bits 17..21 of the id.
    #[allow(clippy::cast_possible_truncation)]
    fn worker_id(&self) -> u8 {
        ((self.id() & 0x003E_0000) >> 17) as u8
    }

    /// The id of the internal process that generated the Snowflake.
    ///
    /// Derived from bits 12..16 of the id.
    #[allow(clippy::cast_possible_truncation)]
    fn process_id(&self) -> u8 {
        ((self.id() & 0x1F000) >> 12) as u8
    }

    /// The increment of the Snowflake. For every id that is generated on a process, this number is
    /// incremented.
    ///
    /// Derived from bits 0..11 of the id.
    #[allow(clippy::cast_possible_truncation)]
    fn increment(&self) -> u16 {
        (self.id() & 0xFFF) as u16
    }
}

impl Snowflake for Id<marker::Application> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Attachment> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::AuditLogEntry> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Channel> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Command> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::CommandVersion> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Emoji> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Generic> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Guild> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Integration> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Interaction> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Message> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Role> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Stage> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::User> {
    fn id(&self) -> u64 {
        self.get()
    }
}

impl Snowflake for Id<marker::Webhook> {
    fn id(&self) -> u64 {
        self.get()
    }
}

#[cfg(test)]
mod tests {
    use super::Snowflake;
    use static_assertions::{assert_impl_all, assert_obj_safe};
    use twilight_model::id::{marker, Id};

    assert_impl_all!(Id<marker::Application>: Snowflake);
    assert_impl_all!(Id<marker::Attachment>: Snowflake);
    assert_impl_all!(Id<marker::AuditLogEntry>: Snowflake);
    assert_impl_all!(Id<marker::Channel>: Snowflake);
    assert_impl_all!(Id<marker::Command>: Snowflake);
    assert_impl_all!(Id<marker::CommandVersion>: Snowflake);
    assert_impl_all!(Id<marker::Emoji>: Snowflake);
    assert_impl_all!(Id<marker::Generic>: Snowflake);
    assert_impl_all!(Id<marker::Guild>: Snowflake);
    assert_impl_all!(Id<marker::Integration>: Snowflake);
    assert_impl_all!(Id<marker::Interaction>: Snowflake);
    assert_impl_all!(Id<marker::Message>: Snowflake);
    assert_impl_all!(Id<marker::Role>: Snowflake);
    assert_impl_all!(Id<marker::Stage>: Snowflake);
    assert_impl_all!(Id<marker::User>: Snowflake);
    assert_impl_all!(Id<marker::Webhook>: Snowflake);
    assert_obj_safe!(Snowflake);

    #[test]
    fn test_timestamp() {
        let expected: i64 = 1_445_219_918_546;
        let id = Id::<marker::Generic>::new(105_484_726_235_607_040).expect("non zero");

        assert_eq!(expected, id.timestamp())
    }

    #[test]
    fn test_worker_id() {
        let expected: u8 = 8;
        let id = Id::<marker::Generic>::new(762_022_344_856_174_632).expect("non zero");

        assert_eq!(expected, id.worker_id())
    }

    #[test]
    fn test_process_id() {
        let expected: u8 = 1;
        let id = Id::<marker::Generic>::new(61_189_081_970_774_016).expect("non zero");

        assert_eq!(expected, id.process_id())
    }

    #[test]
    fn test_increment() {
        let expected: u16 = 40;
        let id = Id::<marker::Generic>::new(762_022_344_856_174_632).expect("non zero");

        assert_eq!(expected, id.increment())
    }
}
